trigger:
- master 

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'DockerHubConnection'  
  imageName: 'sebastianpreis/nestjsapp'  
  tag: '$(Build.BuildId)'

stages:
  - stage: Test
    displayName: Run E2E Tests
    jobs:
      - job: E2ETests
        displayName: NestJS E2E Tests
        pool:
          name: upcode-dev.at
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            submodules: true

          # Setting up the Docker environment for E2E testing
          - script: |
              docker build -f Dockerfile -t $(imageName):test .
              docker run --env-file .env.test -d --name app-test $(imageName):test
              docker exec app-test npm run test:e2e
            displayName: Execute E2E Tests
          - script: |
              docker stop app-test
              docker rm app-test
            displayName: Cleanup Test Environment

  - stage: Build
    displayName: Build and Push Image
    jobs:
      - job: Build
        displayName: Build Docker Image
        pool:
          name: upcode-dev.at
        steps:
          - checkout: self
            submodules: true

          # Build and Push Docker Image
          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              command: build
              dockerfile: '**/Dockerfile'
              repository: $(imageName)
              tags: |
                $(tag)
          - task: Docker@2
            displayName: Push Image to DockerHub
            inputs:
              command: push
              repository: $(imageName)
              dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy to OpenShift UAT
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - job: DeployJob
      displayName: Deploy Image to OpenShift UAT
      pool:
        name: upcode-dev.at 
      steps:
        - checkout: none
        - task: oc-cmd@3
          displayName: 'Create New OpenShift Deployment'
          inputs:
            connectionType: 'OpenShift Connection Service'
            openshiftService: 'OpenShiftConnection'
            cmd: |
              oc new-app $(imageName):$(tag) --name=uat-nestjsapp
              oc set env deployment/nestjsapp --from=configmap/uat-nestjsapp
              oc set env deployment/nestjsapp --from=secret/uat-nestjsapp
              oc expose svc/nestjsapp
            checkForErrors: 'false'

        - task: oc-cmd@3
          displayName: 'Update Existing OpenShift Deployment'
          inputs:
            connectionType: 'OpenShift Connection Service'
            openshiftService: 'OpenShiftConnection'
            cmd: |
              oc set image deployment/uat-nestjsapp uat-nestjsapp=$(imageName):$(tag)
            checkForErrors: 'true'
